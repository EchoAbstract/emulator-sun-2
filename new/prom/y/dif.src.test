Only in test: ethertest
Only in test: makefile
Common subdirectories: src/sunmon and test/sunmon
Only in test: ticks.b
Only in test: ticks.c
Only in test: ticks.ls
Only in test/sunmon: 3com
Common subdirectories: src/sunmon/CADLINC and test/sunmon/CADLINC
Only in test/sunmon: JEP_TFTP
Only in test/sunmon: JEP_TFTP2
Common subdirectories: src/sunmon/STANFORD and test/sunmon/STANFORD
Common subdirectories: src/sunmon/STANFORD2 and test/sunmon/STANFORD2
Common subdirectories: src/sunmon/STANFTI10 and test/sunmon/STANFTI10
Common subdirectories: src/sunmon/STANSMI10 and test/sunmon/STANSMI10
Common subdirectories: src/sunmon/STNFRD_TFTP and test/sunmon/STNFRD_TFTP
Common subdirectories: src/sunmon/conf and test/sunmon/conf
Common subdirectories: src/sunmon/conf2 and test/sunmon/conf2
Common subdirectories: src/sunmon/confreg and test/sunmon/confreg
Common subdirectories: src/sunmon/doc and test/sunmon/doc
Common subdirectories: src/sunmon/eftpnetboot and test/sunmon/eftpnetboot
Common subdirectories: src/sunmon/enet10 and test/sunmon/enet10
Common subdirectories: src/sunmon/enet3 and test/sunmon/enet3
Common subdirectories: src/sunmon/h and test/sunmon/h
Common subdirectories: src/sunmon/help and test/sunmon/help
Common subdirectories: src/sunmon/kernel and test/sunmon/kernel
Common subdirectories: src/sunmon/miscnetboot and test/sunmon/miscnetboot
Common subdirectories: src/sunmon/prom2 and test/sunmon/prom2
Common subdirectories: src/sunmon/screen and test/sunmon/screen
Common subdirectories: src/sunmon/subrs and test/sunmon/subrs
Common subdirectories: src/sunmon/sunconfig and test/sunmon/sunconfig
Common subdirectories: src/sunmon/tftpnetboot and test/sunmon/tftpnetboot
Only in test/sunmon/STANSMI10: autoboot.b
Only in test/sunmon/STANSMI10: bedecode.b
Only in test/sunmon/STANSMI10: boottable.b
Only in test/sunmon/STANSMI10: busyio.b
Only in test/sunmon/STANSMI10: commands.b
Only in test/sunmon/STANSMI10: emulate.b
Only in test/sunmon/STANSMI10: gethexbyte.b
Only in test/sunmon/STANSMI10: getline.b
Only in test/sunmon/STANSMI10: getnum.b
Only in test/sunmon/STANSMI10: givehelp.b
Only in test/sunmon/STANSMI10: ishex.b
diff -r src/sunmon/STANSMI10/makefile test/sunmon/STANSMI10/makefile
1c1
< IDENT=-DSTANFORD -DSUNV1PCREVD -DBOOTHELP -DFRAMEBUF -DEMULATE -DBREAKTRAP -DBREAKKEY -DSMI10
---
> IDENT=-DSTANFORD -DSUNV1PCREVD -DBOOTHELP -DFRAMEBUF -DEMULATE -DBREAKTRAP -DBREAKKEY -DSMI10 -DWATCHDOG
28c28
< OBJS=sunmon.b commands.b transparent.b emulate.b bedecode.b mapmem.b \
---
> OBJS= ssunmon.b commands.b transparent.b emulate.b bedecode.b mapmem.b \
33c33
< CFILES=../kernel/sunmon.c ../kernel/commands.c ../kernel/transparent.c \
---
> CFILES=../kernel/ssunmon.c ../kernel/commands.c ../kernel/transparent.c \
46c46
< 	$(CC) -d -o stanford.dl stanford
---
> 	../dl68 -s19 -o stanford.dl stanford
91,92c91,94
< sunmon.b: ../kernel/sunmon.c
< 	${CC} -I. -c ${CFLAGS} ../kernel/sunmon.c
---
> ssunmon.b: ../kernel/ssunmon.c
> 	${CC} -I. -c ${CFLAGS} ../kernel/ssunmon.c
> sssunmon.b: ../kernel/sssunmon.c
> 	${CC} -I. -c ${CFLAGS} ../kernel/sssunmon.c
134,135c136,137
< sunmon.b: ../h/sunmon.h ../h/asmdef.h ../h/globram.h ../h/sunuart.h
< sunmon.b: ../h/suntimer.h ../h/confreg.h ../h/screen.h ../h/prom2.h
---
> sssunmon.b: ../h/sunmon.h ../h/asmdef.h ../h/globram.h ../h/sunuart.h
> sssunmon.b: ../h/suntimer.h ../h/confreg.h ../h/screen.h ../h/prom2.h
Only in test/sunmon/STANSMI10: makefile.LOT
Only in test/sunmon/STANSMI10: mapmem.b
Only in test/sunmon/STANSMI10: message.b
Only in test/sunmon/STANSMI10: printhex.b
Only in test/sunmon/STANSMI10: proxies.b
Only in test/sunmon/STANSMI10: queryval.b
Only in test/sunmon/STANSMI10: sssunmon.c
Only in test/sunmon/STANSMI10: ssunmon.b
Only in test/sunmon/STANSMI10: ssunmon.c
Binary files src/sunmon/STANSMI10/stanford and test/sunmon/STANSMI10/stanford differ
Only in test/sunmon/STANSMI10: stanford.dl
diff -r src/sunmon/STANSMI10/sym.out test/sunmon/STANSMI10/sym.out
1,11c1,12
< UARTInitSeq 201a40	HardReset 2000f2	mapmem 2011b8	setmode 20089a
< message 201734	UARTSpeeds 201a50	SoftReset 20041c	UARTInitEnd 201a4c
< writechar 201526	monitor 20092c	main 200068	Emulate 200efc
< autoboot 20133c	getchar 2018a6	getone 201648	peekchar 20167a
< openitem 2004b4	queryval 2017b8	transparent 200e5c	bedecode 2010a4
< doload 20075e	givehelp 201284	SunIdent 201a60	dobreak 2007b4
< bootload 2014a0	getrecord 200562	TakeBreak 200842	openreg 20069e
< putchar 20185c	getline 2015a4	getnum 201690	gethexbyte 201568
< _reg_nam 201920	boottype 2014da	ishex 2016cc	printhex 201764
< busyoutb 20182a	legal 2019ec	localhelp 2012b0	listboots 2013fc
< BootTable 201c4c	NoBootProm 201d40	busyouta 2017f8	chardigs 201d58
---
> UARTInitSeq 201b5c	HardReset 20010a	mapmem 201224	setmode 200906
> message 20179c	UARTSpeeds 201b6c	SoftReset 200488	UARTInitEnd 201b68
> writechar 20158e	monitor 200998	main 200068	Emulate 200f68
> autoboot 2013a4	getchar 201972	getone 2016b0	peekchar 2016e2
> openitem 200520	queryval 201884	transparent 200ec8	bedecode 201110
> doload 2007ca	givehelp 2012ec	SunIdent 201b7c	dobreak 200820
> bootload 201508	getrecord 2005ce	TakeBreak 2008ae	openreg 20070a
> putchar 201928	getline 20160c	getnum 2016f8	gethexbyte 2015d0
> _reg_nam 201a3c	boottype 201542	ishex 201734	printhex 2017cc
> busyoutb 2018f6	legal 201b08	localhelp 201318	listboots 201464
> BootTable 201d68	NoBootProm 201e58	busyouta 2018c4	printoctal 201820
> chardigs 201e70	lmul 2019d4	_etext 201a24	_edata 201e88
Only in test/sunmon/STANSMI10: tables.b
Only in test/sunmon/STANSMI10: transparent.b
Only in test/sunmon/STANSMI10: version.b
Binary files src/sunmon/STNFRD_TFTP/boot.b and test/sunmon/STNFRD_TFTP/boot.b differ
Binary files src/sunmon/STNFRD_TFTP/busyio.b and test/sunmon/STNFRD_TFTP/busyio.b differ
Binary files src/sunmon/STNFRD_TFTP/enbootload.b and test/sunmon/STNFRD_TFTP/enbootload.b differ
Binary files src/sunmon/STNFRD_TFTP/message.b and test/sunmon/STNFRD_TFTP/message.b differ
Binary files src/sunmon/STNFRD_TFTP/printhex.b and test/sunmon/STNFRD_TFTP/printhex.b differ
Binary files src/sunmon/STNFRD_TFTP/prom2.b and test/sunmon/STNFRD_TFTP/prom2.b differ
Binary files src/sunmon/STNFRD_TFTP/screen.b and test/sunmon/STNFRD_TFTP/screen.b differ
Binary files src/sunmon/STNFRD_TFTP/writechar.b and test/sunmon/STNFRD_TFTP/writechar.b differ
Only in test/sunmon/conf: JEP_TFTP
Only in test/sunmon/conf2: JEP_TFTP2
diff -r src/sunmon/conf2/files test/sunmon/conf2/files
38c38,39
< enet10/excelan.c		optional enet10 device-driver
---
> enet10/3c400.c			optional threecom device-driver
> enet10/excelan.c		optional excelan device-driver
Only in test/sunmon/conf2: oldfiles
Only in test/sunmon/enet10: 3c400.c
Only in test/sunmon/enet10: 3c400.h
diff -r src/sunmon/enet10/constants.h test/sunmon/enet10/constants.h
1,2d0
< #include "../enet10/excelan.h"
< 
diff -r src/sunmon/enet10/excelan.c test/sunmon/enet10/excelan.c
11a12
> #include "../enet10/excelan.h"
Only in test/sunmon/enet10: ticks.c
Only in test/sunmon/h: am9513.h
diff -r src/sunmon/h/asmdef.h test/sunmon/h/asmdef.h
95c95
< 	asm("	movw	#a.,sp@-");\
---
> 	asm("	movw	#a,sp@-");\
diff -r src/sunmon/h/globram.h test/sunmon/h/globram.h
59a60,62
>     	long DogMap0;	    	/* what was in page 0 at watchdog */
>     	long DogRefr;	    	/* address of the old refresh routine */
>     	int  WhyReset;	    	/* contains the reason for reset */
diff -r src/sunmon/h/sunmon.h test/sunmon/h/sunmon.h
23,24d22
< #define MAJVERSION	1
< #define MINVERSION	0
52a51
> asm("INITSPa = 0x1000");
54a54
> asm("USERCODE = 0x1000");
56d55
< 
112a112
>     	    	    	    	/* Default start of user code */
114c114
< 				/* Reset switch hit (or soft reset) */
---
> asm("EXC_RESET=0");		/* Reset switch hit (or soft reset) */
116c116
< 				/* Abort switch hit */
---
> asm("EXC_ABORT=1");		/* Abort switch hit */
118c118
< 				/* Breakpoint trap taken */
---
> asm("EXC_BREAK=2");		/* Breakpoint trap taken */
120c120
< 				/* Exit trap taken */
---
> asm("EXC_EXIT=3");		/* Exit trap taken */
122c122
< 				/* Trace trap taken */
---
> asm("EXC_TRACE=4");		/* Trace trap taken */
124c124
< 				/* Emulator trap */
---
> asm("EXC_EMT=5");		/* Emulator trap */
126c126
< 				/* Bus Error */
---
> asm("EXC_BUSERR=6");		/* Bus Error */
128,129c128,130
< 				/* Address Error */
< 
---
> asm("EXC_ADRERR=7");		/* Address Error */
> #define EXC_DOG	8
> asm("EXC_DOG=8");		/* WatchDog Timeout */
diff -r src/sunmon/h/suntimer.h test/sunmon/h/suntimer.h
11c11
< #include "am9513.h"
---
> #include "../h/am9513.h"
18c18
< /* Input frequency is 4MHz  SMI8 */
---
> /* Input frequency is 4MHz  SMI8, CADLINC */
35a36,39
> #ifdef CADLINC
> #define TFreqUART 13	/* with a square wave of 16 * 9615.4Hz */
> #endif CADLINC
> 
36a41,45
> #ifdef WATCHDOG
> #define	TModRefr  (unsigned short) \
> 	(TCMFall|TCMNoGa|TCMGate1|TCMDiSpG|TCMRldLd|\
> 		TCMCntRep|TCMBinCnt|TCMDownCnt|TCMTCTog)
> #else WATCHDOG
37a47
> #endif WATCHDOG
39c49
< #ifdef FTI1
---
> #ifdef FTI10
44c54
< #define TFreqRefr 9934	/* frequency: 500Hz */
---
> #define TFreqRefr 4915	/* frequency: 500Hz */
50a61,64
> #ifdef CADLINC
> #define TFreqRefr 8000	/* frequency: 500Hz */
> #endif CADLINC
> 
68c82
< #define	TModWatchDog1 \
---
> /*#define	TModWatchDog1 \
70c84
< 		TCMCntRep|TCMBinCnt|TCMDownCnt|TCMTCTog)
---
> 		TCMCntRep|TCMBinCnt|TCMDownCnt|TCMTCTog) */
72,74c86,88
< #ifdef FTI10
< #define	TFreqWatchDog1	369	/* 10 seconds should be sufficient */
< #endif FTI10
---
> /* #ifdef FTI10
>  #define	TFreqWatchDog1	369
>  #endif FTI10
76,78c90,92
< #ifdef SMI10
< #define	TFreqWatchDog1	738	/* 10 seconds should be sufficient */
< #endif SMI10
---
>  #ifdef SMI10
>  #define	TFreqWatchDog1	738
>  #endif SMI10
80,82c94,96
< #ifdef SMI8
< #define	TFreqWatchDog1	600	/* 10 seconds should be sufficient */
< #endif SMI8
---
>  #ifdef SMI8
>  #define	TFreqWatchDog1	600
>  #endif SMI8
84,85c98,101
< /* Same as Refresh timer mode */
< #define	TModWatchDog2	TModUART
---
>  #ifdef CADLINC
>  #define	TFreqWatchDog1	600
>  #endif CADLINC
> */
87,88c103,108
< /* 50% longer than Refresh timer */
< #define	TFreqWatchDog2	((TFreqRefr*3)/2)
---
> #define	TModWatchDog2	  (unsigned short) \
> 	(TCMFall|TCMNoGa|TCMGate1|TCMDiSpG|TCMRldLd|\
> 		TCMCntRep|TCMBinCnt|TCMDownCnt|TCMHighTC)
> 
> /* 50% longer than Refresh timer. minus 1% slop */
> #define	TFreqWatchDog2	( ((TFreqRefr*3)/2) + (TFreqRefr/25) )
diff -r src/sunmon/kernel/boottable.c test/sunmon/kernel/boottable.c
39c39
< 	/* 2  */	"net/bridge",	1,
---
> 	/* 2  */	"bridge",	1,
diff -r src/sunmon/kernel/emulate.c test/sunmon/kernel/emulate.c
56c56
< 		return((MAJVERSION*0x100)+MINVERSION);
---
> 		return((1*0x100)+1);
125c125,128
< #endif SMI8    
---
> #endif SMI8
> #ifdef CADLINC
>     	        return(0);
> #endif CADLINC
128c131
< #endif SMI8    
---
> #endif SMI10
Only in test/sunmon/kernel: sssunmon.c
Only in test/sunmon/kernel: ssunmon.c
diff -r src/sunmon/kernel/sunmon.c test/sunmon/kernel/sunmon.c
0a1
> 
43c44
< 	excv(/INITSPa);	/* excv(/INITSP) doesn't work here */
---
> 	excv(INITSPa);	/* excv(/INITSP) doesn't work here */
268c269
< 		if (MAKEVERSION(MAJVERSION,MINVERSION) !=
---
> 		if (MAKEVERSION(1,1) !=
diff -r src/sunmon/kernel/tables.c test/sunmon/kernel/tables.c
19a20,22
> #ifdef FTI10
> 	3,	(NECrxena|NECrx8bt),
> #else
21c24
< 					/* rx enable, 8 bit, auto enable */
---
> #endif					/* rx enable, 8 bit, auto enable */
40a44,47
> 
> #ifdef CADLINC
> #define	MAKEBAUD(bd)	((13*9600)/(bd))
> #endif CADLINC
diff -r src/sunmon/kernel/version.c test/sunmon/kernel/version.c
15c15
< char SunIdent[] = IDENT(MAJVERSION,MINVERSION);
---
> char SunIdent[] = IDENT(1,1);
diff -r src/sunmon/prom2/prom2.c test/sunmon/prom2/prom2.c
31c31
< 		return(MAKEVERSION(MAJVERSION, MINVERSION));
---
> 		return(MAKEVERSION(1,1));
diff -r src/sunmon/subrs/ishex.c test/sunmon/subrs/ishex.c
11d10
<  * Completely rewritten (to reduce code space) by Ross Finlayson, April 1984
13a13,18
> #include "../h/sunmon.h"
> #include "../h/asmdef.h"
> #include "../h/globram.h"
> 
> #define isnum(c) ((c>='0')&&(c<='9'))
> 
18c23
< register char ch;
---
> char ch;
20,25c25,30
<     if (ch >= '0' && ch <= '9')
<         return (ch - '0');
<     ch |= 040; /* Convert to lower case. */
<     if (ch >= 'a' && ch <= 'f')
<         return (ch - 'a' + 10);
<     return (-1);
---
> 	register char c= ch;
> 
> 	if (isnum(c)) 		then return(c-'0');
> 	if (c>='a'&&c<='f') 	then return(c-'a'+10);
> 	if (c>='A'&&c<='F') 	then return(c-'A'+10);
> 	return(-1);
diff -r src/sunmon/subrs/printhex.c test/sunmon/subrs/printhex.c
10a11,13
>  * Edits:
>  *	Philip Almquist, September 25, 1984
>  *	- added printoctal
31a35,52
> }
> 
> /*
>  * printoctal prints rightmost <digs> octal digits of <val>
>  */
> printoctal(val,digs)
> register long val;
> register int digs;
> {
> 	register int i;
> 
> 	if (digs <= 0)
> 		i = (11-1) * 3;		/* 11 digits is enough for 32 bits */
> 	else
> 		i = (digs-1) * 3;	/* 3 bits per digit */
> 
> 	for (; i >= 0; i-=3)
> 		putchar(chardigs[(val>>i)&07]);
diff -r src/sunmon/tftpnetboot/enbootload.c test/sunmon/tftpnetboot/enbootload.c
92c92
<     IpAddr ourIpAddress, hostIpAddress;
---
>     IpAddr ourIpAddress, hostIpAddress, serverIpAddress;
112,113c112,113
<     /* If a host internet address was given, then use it, otherwise assume
<      * the special address for "local subnet broadcasting".
---
>     /* Find our internet address. This is obtained from the input string, if
>      * an internet address was given, otherwise 'reverse ARP' is used.
115c115
<     if (*hostAddrStr)
---
>     if (*ourAddrStr)
117c117
<         if (!parseIpAddress(hostAddrStr, &hostIpAddress))
---
>         if (!parseIpAddress(ourAddrStr, &ourIpAddress))
124,129d123
<         hostIpAddress = IP_SUBNET_BROADCAST;
< 
<     /* If a starting (memory) address was given, then use it, otherwise use the
<      * default starting address.
<      */
<     if (*locStr)
131c125
<         if (!parseHexAddress(locStr, &startingAddress))
---
> 	if (!ReverseArp(&ourIpAddress, &serverIpAddress))
133c127
< 	    message("Bad starting address!\n");
---
>             message("Warning: RARP failed\n");
137,138d130
<     else
<         startingAddress = USERCODE;
140,141c132,133
<     /* Find our internet address. This is obtained from the input string, if
<      * an internet address was given, otherwise 'reverse ARP' is used.
---
>     /* If a host internet address was given, then use it, otherwise assume
>      * that we will use the Ip addresss of the reverse arp server.
143c135
<     if (*ourAddrStr)
---
>     if (*hostAddrStr)
145c137
<         if (!parseIpAddress(ourAddrStr, &ourIpAddress))
---
>         if (!parseIpAddress(hostAddrStr, &hostIpAddress))
152,158c144
<       {
< 	if (!ReverseArp(&ourIpAddress))
< 	  {
<             message("Warning: RARP failed\n");
<             ourIpAddress = DEFAULT_SOURCE_IP_ADDRESS;
< 	  }
<       }
---
>         hostIpAddress = serverIpAddress;
164,165c150,151
<     if (!*hostAddrStr
<          || !Arp(hostIpAddress, AddressOf(hostEnetAddress), ourIpAddress))
---
> 
>     if (!Arp(hostIpAddress, AddressOf(hostEnetAddress), ourIpAddress))
166a153,166
> 
>     /* If a starting (memory) address was given, then use it, otherwise use the
>      * default starting address.
>      */
>     if (*locStr)
>       {
>         if (!parseHexAddress(locStr, &startingAddress))
> 	  {
> 	    message("Bad starting address!\n");
> 	    return(0);
> 	  }
>       }
>     else
>         startingAddress = USERCODE;
diff -r src/sunmon/tftpnetboot/enet.c test/sunmon/tftpnetboot/enet.c
56,58c56,57
< 	mc68kenread((unsigned short *)enetPacket, &timeoutCount,
< 		    TOTAL_PACKET_SIZE>>1);
< 	if (timeoutCount <= 0)
---
> 	if (mc68kenread((unsigned short *)enetPacket, &timeoutCount,
> 		    TOTAL_PACKET_SIZE>>1) <= 0)
diff -r src/sunmon/tftpnetboot/revarp.c test/sunmon/tftpnetboot/revarp.c
11,12c11,12
< Boolean ReverseArp(ipAddress)
<     IpAddr *ipAddress;
---
> Boolean ReverseArp(ipAddress, serverIpAddress)
>     IpAddr *ipAddress, *serverIpAddress;
46a47
> 	*serverIpAddress = revArpPacket->ar_spa;
diff -r src/sunmon/tftpnetboot/tftp.c test/sunmon/tftpnetboot/tftp.c
79a80
> 
100a102
> 
122a125
>     unsigned short OUR_TID;
125a129
>     short waster = 0;	/* *JEP* */
130a135,138
>     /* first establish a random number for OUR_TID */
> 
>     OUR_TID = (enRandomI() && 0xffff);
> 
131a140,141
> 
> 
178a189
> 
diff -r src/sunmon/tftpnetboot/tftp.h test/sunmon/tftpnetboot/tftp.h
12,16d11
< /* The transfer ID that we will use. This should really be chosen randomly on
<  * each read request, but instead we just use this single ('arbitrary') value.
<  */
< #define OUR_TID 0xF00
< 
